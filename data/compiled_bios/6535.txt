 Edmund Clarke | Carnegie Mellon University - Computer Science Department Skip to main content Menu Toggle menu visibility Staff Faculty Current Students Prospective Students Menu Toggle menu visibility Academics Directory Research About News Events Search Toggle search visibility Search form Search Edmund Clarke University Professor, Emeritus Office: 9231 Gates & Hillman Centers Email: ec10@andrew.cmu.edu Phone: (412) 268-2628 Department:Computer Science Department Web site:http://www.cs.cmu.edu/~emc/ Administrative Support Person: Charlotte Yano Research Interests: Formal Methods My interests span three areas: Programming Systems, Hardware, and Theory. I use the techniques and insights of theoretical computer science to solve problems in programming systems and hardware design that are of practical interest. I have a number of active research projects in these areas that I would be happy to discuss with students. Below are short descriptions of two research projects that I think are particularly exciting. Hardware and Software Verification. Logical errors in finite state concurrent systems like sequential circuits and communication protocols are an important problem for computer scientists. They can delay getting a new product on the market or cause the failure of some critical device that is already in use. The most widely used verification method is based on extensive simulation and can easily miss significant errors when the number possible states of the system is very large. Although there has been considerable research on the use of theorem provers, term rewriting systems and proof checkers for verification, these techniques are time consuming and often require a great deal of manual intervention. My group has developed an alternative approach called temporal logic model checking in which specifications are expressed in a propositional temporal logic and an efficient search procedure is used to determine whether or not the specifications are satisfied. In the twenty-five years that have passed since the original algorithm was published, the size of the systems that can be verified by this means has increased dramatically. By developing special programming languages for describing transition systems, it became possible to check examples with several thousand states. This was sufficient to find subtle errors in a number of nontrivial, although relatively small, circuit and protocols designs. Use of boolean decision diagrams (BDDs) led to a major increase in the size of the examples we could handle by this technique. Representing transition relations implicitly using BDDs made it possible to verify examples that would have required 1020 states with the original version algorithm. Refinements of the BDD-based techniques have pushed the state count up over 10100 states. By combining model checking with abstraction, we have been able to check even larger examples. In one case, we were able to verify a pipelined ALU design with 64 registers, each 64 bits wide, and more than 101300 reachable states. Analytica --- A Theorem Prover for Mathematica. Analytica is an automatic theorem prover for theorems in elementary analysis. The prover runs in the Mathematica environment and is written in Mathematica language. The goal of the project is to use a powerful symbolic computation system to prove theorems that are beyond the scope of previous automatic theorem provers. The theorem prover is also able to guarantee the correctness of certain steps that are made by the symbolic computation system and therefore prevent common errors like division by a expression that could be zero. Since we wanted to generate proofs that were as similar as possible to proofs constructed by humans, we use a variant of natural deduction to generate proofs. We have demonstrated the power of our theorem prover on several non-trivial examples including the basic properties of the stereographic projection and a series of three lemmas that lead to a proof of Weierstrass's example of a continuous nowhere differentiable function. Each of the lemmas in the latter example is proved completely automatically. In a related project that uses similar techniques, we have managed to prove all of the theorems and examples in Chapter 2 of Ramanujan's Collected Works completely automatically. We believe these examples provide convincing justification for combining powerful symbolic computation techniques with theorem provers. Search Terms Find Graduate Advisors by Name - Advisors - Acar, Umut Aldrich, Jonathan Amvrosiadis, George Andersen, David Balcan, Nina Beckmann, Nathan Blelloch, Guy Brookes, Stephen Brumley, David Chen, Tianqi Crane, Keenan Crary, Karl Datta, Anupam Erdmann, Michael Faloutsos, Christos Fanti, Giulia Fredrikson, Matt Frieze, Alan Ganger, Greg Garlan, David Gibbons, Phillip Gligor, Virgil Goldstein, Seth Goyal, Vipul Gupta, Anupam Guruswami, Venkatesan Haeupler, Bernhard Harchol-Balter, Mor Harper, Robert Heule, Marijn Hodgins, Jessica Hoffmann, Jan Jia, Limin Kanade, Takeo Kolter, J. Zico Kothari, Pravesh Kumar, Swarun Lee, Tai-Sing Levin, Golan Lucia, Brandon Mason, Matthew Maxion, Roy Miller, Heather Miller, Gary Mitchell, Tom Mowry, Todd O'Donnell, Ryan O'Hallaron, David O'Toole, Matthew Parno, Bryan Pavlo, Andy Pfenning, Frank Platzer, Andr Pollard, Nancy Ravi, R. Reddy, Raj Rudich, Steven Sandholm, Tuomas Satyanarayanan, Mahadev Schwartz, Russell Sekar, Vyas Seshan, Srinivasan Shah, Nihar Shaw, Mary Sherry, Justine Shi, Elaine Siewiorek, Daniel Simmons, Reid Sleator, Daniel Steenkiste, Peter Touretzky, David Vinayak, Rashmi Korlakai Wang, Weina Woodruff, David Xing, Eric P. Yang, Yiming List Faculty by Research Interest Artificial Intelligence-Computational Neuroscience-Robotics-Machine Learning-Planning, Knowledge Representation and Game Theory-Technology and Society-Vision, Speech and Natural LanguagesSecurity-Cryptography-Security and PrivacyGraphics-Animation-VisionProgramming Languages-Formal Methods-Pure and Applied Logic-Software Engineering-Software Verification-Type TheorySystems-Computer Architecture-Databases-Data-Intensive and Cloud Computing-Distributed Systems-Human-Computer Interaction-Mobile and Pervasive Computing-Networking-Operating Systems-Scientific ComputingTheory-Algorithms and Complexity-Computational Biology-Game Theory-Performance Modeling & Analysis Computer Science Department Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213 Phone: 412-268-2565 Fax: 412-268-5576  Pittsburgh Campus Qatar Campus Legal Info 